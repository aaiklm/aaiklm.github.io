{"version":3,"file":"764-877c8fde97f37d2f2b9a.js","mappings":"uOAsFA,SAASA,EAAcC,GACrB,IAAIC,EAAS,GAEb,IAAK,MAAMC,KAAQF,EAAO,CACxB,MAAMG,EAAQH,EAAME,IAEN,IAAVC,EACFF,GAAU,IAAMC,GACG,IAAVC,IACTF,GAAU,IAAIC,MAASC,KAE3B,CAEA,OAAOF,CACT,CAgBA,SAASG,EAASC,EAAYC,GAC5B,GAA+B,IAA3BA,EAAgBC,OAClB,MAAO,CAAC,CACNC,IAAK,GACLR,MAAO,CAAC,IAIZ,MAAMS,EAAS,GAWf,OAVAH,EAAgBI,SAAQC,IAEtB,MAAMX,EAAqB,KAAbW,EAAkB,CAAC,EAAI,CACnCC,MAAOD,GAETF,EAAOI,KAAK,CACVL,IAAKH,EAAWM,GAChBX,SACA,IAEGS,CACT,CAEA,MArIA,MACEK,YAAYC,EAAO,CAAC,GAClBC,KAAKX,WAAa,CAChB,GAAI,IAENW,KAAKC,WAAa,IAAI,IAAW,IAAI,IAAsBF,EAAKG,SAASN,IACvEI,KAAKX,WAAWO,GAAS,EAAE,IAC1B,CAACO,EAAOC,EAAIjB,KACb,MAAM,OACJkB,EAAM,MACNC,GACEnB,EACJa,KAAKX,WAAWc,EAAMI,OAAQ,SAAiB,QAAeH,EAAIC,GAASC,EAAM,IAEnFN,KAAKQ,cAAgB,GACrBR,KAAKS,cAAgB,IAAI,EAAAC,EAAM,IAAI,IAAsBX,EAAKG,SAAS,CAACC,EAAOC,EAAIjB,KACjFa,KAAKQ,gBAAiB,QAAoBJ,GAAI,QAAoBjB,GAAO,IAE3Ea,KAAKW,eAAiB,GACtBX,KAAKY,eAAiB,IAAI,EAAAF,EAAM,IAAI,IAAsBX,EAAKG,SAAS,CAACC,EAAOC,EAAIjB,KAClFa,KAAKW,iBAAkB,QAAqBP,GAAI,QAAiBjB,GAAO,GAE5E,CAEA0B,YAAYC,GACV,OAAO,OAAoBd,KAAKC,WAAYa,EAAO,GAAI,GACzD,CAEAC,eAAeC,GACb,MAAMT,EAAMU,KAAKC,UAAUF,GAC3B,OAAOhB,KAAKS,cAAcU,SAASZ,EAAKS,EAC1C,CAEAI,gBAAgBC,GACd,MAAMd,EAAMU,KAAKC,UAAUG,GAC3B,OAAOrB,KAAKY,eAAeO,SAASZ,EAAKc,EAC3C,CAEAC,iBACE,MAAO,IAAKtB,KAAKW,eAAepB,OAAS,CAAC,CACxCC,IAAKQ,KAAKW,eACV3B,MAAO,CACL,eAAgB,eAEf,MAASgB,KAAKQ,cAAcjB,OAAS,CAAC,CACzCC,IAAKQ,KAAKQ,cACVxB,MAAO,CACL,eAAgB,eAEf,MAAQI,EAASY,KAAKX,WAAYW,KAAKC,WAAWsB,sBACzD,CAEAC,mBAAmBC,EAAY,uBAC7B,OASG,SAA4BhC,EAAQgC,GACzC,IAAIC,EAAO,GAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIlC,EAAOF,OAAQoC,IAAK,CACtC,MAAMC,EAAQnC,EAAOkC,IAEnBE,MAAOC,KACJC,GACDH,EAAM5C,MAKV0C,GAAQ,SAAS3C,EAJH,CACZ8C,MAAOC,EAAoB,GAAGL,KAAaK,IAAsBL,KAC9DM,OAEoCH,EAAMpC,aACjD,CAEA,OAAOkC,CACT,CA1BWM,CAAmBhC,KAAKsB,iBAAkBG,EACnD,CAEAQ,SACE,OAAOjC,KAAKW,eAAiBX,KAAKQ,cAwCtC,SAAmBnB,EAAYC,GAC7B,IAAIL,EAAS,GAUb,OATAK,EAAgBI,SAAQC,IACtB,MAAMuC,EAAQ7C,EAAWM,GAGvBV,GADe,KAAbU,EACQ,UAAUA,KAAYuC,KAEtBA,CACZ,IAEKjD,CACT,CApDsDiC,CAAUlB,KAAKX,WAAYW,KAAKC,WAAWsB,qBAC/F,E","sources":["webpack://web-site/./node_modules/styletron-engine-atomic/dist-browser-esm/server/server.js"],"sourcesContent":["import SequentialIDGenerator from \"../sequential-id-generator\";\nimport { Cache, MultiCache } from \"../cache\";\nimport injectStylePrefixed from \"../inject-style-prefixed\";\nimport { styleBlockToRule, atomicSelector, keyframesBlockToRule, declarationsToBlock, keyframesToBlock, fontFaceBlockToRule } from \"../css\";\n\nclass StyletronServer {\n  constructor(opts = {}) {\n    this.styleRules = {\n      \"\": \"\"\n    };\n    this.styleCache = new MultiCache(new SequentialIDGenerator(opts.prefix), media => {\n      this.styleRules[media] = \"\";\n    }, (cache, id, value) => {\n      const {\n        pseudo,\n        block\n      } = value;\n      this.styleRules[cache.key] += styleBlockToRule(atomicSelector(id, pseudo), block);\n    });\n    this.fontFaceRules = \"\";\n    this.fontFaceCache = new Cache(new SequentialIDGenerator(opts.prefix), (cache, id, value) => {\n      this.fontFaceRules += fontFaceBlockToRule(id, declarationsToBlock(value));\n    });\n    this.keyframesRules = \"\";\n    this.keyframesCache = new Cache(new SequentialIDGenerator(opts.prefix), (cache, id, value) => {\n      this.keyframesRules += keyframesBlockToRule(id, keyframesToBlock(value));\n    });\n  }\n\n  renderStyle(style) {\n    return injectStylePrefixed(this.styleCache, style, \"\", \"\");\n  }\n\n  renderFontFace(fontFace) {\n    const key = JSON.stringify(fontFace);\n    return this.fontFaceCache.addValue(key, fontFace);\n  }\n\n  renderKeyframes(keyframes) {\n    const key = JSON.stringify(keyframes);\n    return this.keyframesCache.addValue(key, keyframes);\n  }\n\n  getStylesheets() {\n    return [...(this.keyframesRules.length ? [{\n      css: this.keyframesRules,\n      attrs: {\n        \"data-hydrate\": \"keyframes\"\n      }\n    }] : []), ...(this.fontFaceRules.length ? [{\n      css: this.fontFaceRules,\n      attrs: {\n        \"data-hydrate\": \"font-face\"\n      }\n    }] : []), ...sheetify(this.styleRules, this.styleCache.getSortedCacheKeys())];\n  }\n\n  getStylesheetsHtml(className = \"_styletron_hydrate_\") {\n    return generateHtmlString(this.getStylesheets(), className);\n  }\n\n  getCss() {\n    return this.keyframesRules + this.fontFaceRules + stringify(this.styleRules, this.styleCache.getSortedCacheKeys());\n  }\n\n}\n\nexport function generateHtmlString(sheets, className) {\n  let html = \"\";\n\n  for (let i = 0; i < sheets.length; i++) {\n    const sheet = sheets[i];\n    const {\n      class: originalClassName,\n      ...rest\n    } = sheet.attrs;\n    const attrs = {\n      class: originalClassName ? `${className} ${originalClassName}` : className,\n      ...rest\n    };\n    html += `<style${attrsToString(attrs)}>${sheet.css}</style>`;\n  }\n\n  return html;\n}\n\nfunction attrsToString(attrs) {\n  let result = \"\";\n\n  for (const attr in attrs) {\n    const value = attrs[attr];\n\n    if (value === true) {\n      result += \" \" + attr;\n    } else if (value !== false) {\n      result += ` ${attr}=\"${value}\"`;\n    }\n  }\n\n  return result;\n}\n\nfunction stringify(styleRules, sortedCacheKeys) {\n  let result = \"\";\n  sortedCacheKeys.forEach(cacheKey => {\n    const rules = styleRules[cacheKey];\n\n    if (cacheKey !== \"\") {\n      result += `@media ${cacheKey}{${rules}}`;\n    } else {\n      result += rules;\n    }\n  });\n  return result;\n}\n\nfunction sheetify(styleRules, sortedCacheKeys) {\n  if (sortedCacheKeys.length === 0) {\n    return [{\n      css: \"\",\n      attrs: {}\n    }];\n  }\n\n  const sheets = [];\n  sortedCacheKeys.forEach(cacheKey => {\n    // omit media (cacheKey) attribute if empty\n    const attrs = cacheKey === \"\" ? {} : {\n      media: cacheKey\n    };\n    sheets.push({\n      css: styleRules[cacheKey],\n      attrs\n    });\n  });\n  return sheets;\n}\n\nexport default StyletronServer;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["attrsToString","attrs","result","attr","value","sheetify","styleRules","sortedCacheKeys","length","css","sheets","forEach","cacheKey","media","push","constructor","opts","this","styleCache","prefix","cache","id","pseudo","block","key","fontFaceRules","fontFaceCache","C","keyframesRules","keyframesCache","renderStyle","style","renderFontFace","fontFace","JSON","stringify","addValue","renderKeyframes","keyframes","getStylesheets","getSortedCacheKeys","getStylesheetsHtml","className","html","i","sheet","class","originalClassName","rest","generateHtmlString","getCss","rules"],"sourceRoot":""}